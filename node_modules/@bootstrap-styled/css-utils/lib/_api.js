"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.screenUtilities = screenUtilities;
exports.printUtilities = printUtilities;

var _breakpoints = require("@bootstrap-styled/css-mixins/lib/breakpoints");

var _utilities = require("@bootstrap-styled/css-mixins/lib/utilities");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * @param {object} gridBreakpoints - grid breakpoints
 * @param {Map} utilities - map of utilities
 * @returns {string} - css screen utilities
 */
function screenUtilities(gridBreakpoints, utilities) {
  return Object.keys(gridBreakpoints).map(function (bp) {
    var infix = (0, _breakpoints.breakpointInfix)(bp, gridBreakpoints);
    var utilityList = []; // eslint-disable-next-line no-unused-vars, no-restricted-syntax

    var _iterator = _createForOfIteratorHelper(utilities),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            utility = _step$value[1];

        if (utility && (utility.responsive || infix === '')) {
          utilityList.push((0, _utilities.generateUtility)(utility, infix));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return (0, _breakpoints.mediaBreakpointUp)(bp, gridBreakpoints, utilityList.join('\n'));
  }).join('\n');
}

function printUtilities(gridBreakpoints, utilities) {
  var utilityList = []; // eslint-disable-next-line no-unused-vars, no-restricted-syntax

  var _iterator2 = _createForOfIteratorHelper(utilities),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          key = _step2$value[0],
          utility = _step2$value[1];

      if (utility && utility.print === true) {
        utilityList.push((0, _utilities.generateUtility)(utility, '-print'));
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return "@media print {\n    ".concat(utilityList.join('\n'), "\n  }");
}