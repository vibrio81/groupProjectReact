"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBordersUtilities = getBordersUtilities;
exports.rounded = rounded;
exports.roundedTop = roundedTop;
exports.roundedRight = roundedRight;
exports.roundedBottom = roundedBottom;
exports.roundedLeft = roundedLeft;
exports.roundedCircle = roundedCircle;
exports.resetBorder = resetBorder;
exports.resetBorderTop = resetBorderTop;
exports.resetBorderRight = resetBorderRight;
exports.resetBorderBottom = resetBorderBottom;
exports.resetBorderLeft = resetBorderLeft;
exports.resetRounded = resetRounded;
exports.resetRoundedTop = resetRoundedTop;
exports.resetRoundedBottom = resetRoundedBottom;
exports.resetRoundedLeft = resetRoundedLeft;
exports.resetRoundedRight = resetRoundedRight;
exports.default = exports.defaultProps = void 0;

var _borderRadius = require("@bootstrap-styled/css-mixins/lib/border-radius");

var defaultProps = {
  '$border-radius': '.25rem',
  '$enable-rounded': true
};
exports.defaultProps = defaultProps;

function getBordersUtilities() {
  var enableRounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-rounded'];
  var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$border-radius'];
  return "\n    ".concat(rounded(enableRounded, radius), "\n    ").concat(roundedTop(enableRounded, radius), "\n    ").concat(roundedRight(enableRounded, radius), "\n    ").concat(roundedBottom(enableRounded, radius), "\n    ").concat(roundedLeft(enableRounded, radius), "\n    ").concat(roundedCircle(), "\n    ").concat(resetRounded(), "\n    ").concat(resetRoundedTop(), "\n    ").concat(resetRoundedRight(), "\n    ").concat(resetRoundedLeft(), "\n    ").concat(resetRoundedBottom(), "\n    ").concat(resetBorder(), "\n    ").concat(resetBorderTop(), "\n    ").concat(resetBorderRight(), "\n    ").concat(resetBorderLeft(), "\n    ").concat(resetBorderBottom(), "\n  ");
}

function rounded() {
  var enableRounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-rounded'];
  var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$border-radius'];
  return "\n    .rounded {\n      ".concat((0, _borderRadius.borderRadius)(enableRounded, radius), "\n    }\n  ");
}

function roundedTop() {
  var enableRounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-rounded'];
  var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$border-radius'];
  return "\n    .rounded-top {\n      ".concat((0, _borderRadius.borderTopRadius)(enableRounded, radius), "\n    }\n  ");
}

function roundedRight() {
  var enableRounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-rounded'];
  var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$border-radius'];
  return "\n    .rounded-right {\n      ".concat((0, _borderRadius.borderRightRadius)(enableRounded, radius), "\n    }\n  ");
}

function roundedBottom() {
  var enableRounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-rounded'];
  var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$border-radius'];
  return "\n    .rounded-bottom {\n      ".concat((0, _borderRadius.borderBottomRadius)(enableRounded, radius), "\n    }\n  ");
}

function roundedLeft() {
  var enableRounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-rounded'];
  var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$border-radius'];
  return "\n    .rounded-left {\n      ".concat((0, _borderRadius.borderLeftRadius)(enableRounded, radius), "\n    }\n  ");
}

function roundedCircle() {
  return "\n    .rounded-circle {\n      border-radius: 50%;\n    }\n  ";
}

function resetBorder() {
  return "\n    .border-0 {\n      border: 0 !important;\n    }\n  ";
}

function resetBorderTop() {
  return "\n    .border-top-0 {\n      border-top: 0 !important;\n    }\n  ";
}

function resetBorderRight() {
  return "\n    .border-right-0 {\n      border-right: 0 !important;\n    }\n  ";
}

function resetBorderBottom() {
  return "\n    .border-bottom-0 {\n      border-bottom: 0 !important;\n    }\n  ";
}

function resetBorderLeft() {
  return "\n    .border-left-0 {\n      border-left: 0 !important;\n    }\n  ";
}

function resetRounded() {
  return "\n    .rounded-0 {\n      border-radius: 0 !important;\n    }\n  ";
}

function resetRoundedTop() {
  return "\n    .rounded-top-0 {\n      border-top-left-radius: 0 !important;\n      border-top-right-radius: 0 !important;\n    }\n  ";
}

function resetRoundedBottom() {
  return "\n    .rounded-bottom-0 {\n      border-bottom-left-radius: 0 !important;\n      border-bottom-right-radius: 0 !important;\n    }\n  ";
}

function resetRoundedLeft() {
  return "\n    .rounded-left-0 {\n      border-bottom-left-radius: 0 !important;\n      border-top-left-radius: 0 !important;\n    }\n  ";
}

function resetRoundedRight() {
  return "\n    .rounded-right-0 {\n      border-bottom-right-radius: 0 !important;\n      border-top-right-radius: 0 !important;\n    }\n  ";
}

var _default = {
  defaultProps: defaultProps,
  getBordersUtilities: getBordersUtilities,
  rounded: rounded,
  roundedTop: roundedTop,
  roundedRight: roundedRight,
  roundedBottom: roundedBottom,
  roundedLeft: roundedLeft,
  roundedCircle: roundedCircle
};
exports.default = _default;