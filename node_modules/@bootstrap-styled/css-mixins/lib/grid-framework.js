"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeGridColumns = makeGridColumns;
exports.default = void 0;

var _grid = require("./grid");

var _breakpoints = require("./breakpoints");

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

/**
 * @public
 * @description Used only by Bootstrap to generate the correct number of grid classes given any value of `$grid-columns`.
 * @param {boolean} [enableGridClasses=true] - if `false`, the function will return an empty string
 * @param {number} [columns=12] - the number of columns
 * @param {string|number} [gutter=30px] - the grid gutter width
 * @param {object} [breakpoints={
      xs: '0',
      sm: '576px',
      md: '768px',
      lg: '992px',
      xl: '1200px',
    }] - The layout max-width grid breakpoint
 *
 * @returns {string} - css mixins utilities for bootstrap grid system
 */
function makeGridColumns() {
  var enableGridClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _grid.defaultProps['$enable-grid-classes'];
  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _grid.defaultProps['$grid-columns'];
  var gutter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _grid.defaultProps['$grid-gutter-width'];
  var breakpoints = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _grid.defaultProps['$grid-breakpoints'];
  // Common properties for all breakpoints
  var gridColumn = "\n    position: relative;\n    width: 100%;\n    min-height: 1px; // Prevent columns from collapsing when empty\n    padding-right: calc(".concat(gutter, " / 2);\n    padding-left: calc(").concat(gutter, " / 2);\n  ");
  return enableGridClasses ? Object.keys(breakpoints).map(function (bp) {
    var infix = (0, _breakpoints.breakpointInfix)(bp, breakpoints); // Allow columns to stretch full width below their breakpoints

    return "".concat(Array.from({
      length: columns
    }, function (_, ind) {
      var i = ind + 1;
      return "&.col".concat(infix, "-").concat(i, ", & .col").concat(infix, "-").concat(i, " { ").concat(gridColumn, " }");
    }).join('\n'), "\n      \n      &.col").concat(infix, ",\n      & .col").concat(infix, "-auto {\n        ").concat(gridColumn, "\n      }\n      \n").concat( // Provide basic `.col-{bp}` classes for equal-width flexbox columns
    (0, _breakpoints.mediaBreakpointUp)(bp, breakpoints, "\n        &.col".concat(infix, ",\n        & .col").concat(infix, " {\n          flex-basis: 0;\n          flex-grow: 1;\n          max-width: 100%;\n        }\n        &.col").concat(infix, "-auto,\n        & .col").concat(infix, "-auto {\n          flex: 0 0 auto;\n          width: auto;\n          max-width: none; // reset earlier grid tiers\n        }\n        \n        ").concat(Array.from({
      length: columns
    }, function (_, i) {
      return "\n          &.col".concat(infix, "-").concat(i + 1, ",\n          & .col").concat(infix, "-").concat(i + 1, " {\n            ").concat((0, _grid.makeCol)(i + 1, columns), "\n          }\n        ");
    }), "\n        \n        &.order").concat(infix, "-first,\n        & .order").concat(infix, "-first { order: -1; }\n        \n        &.order").concat(infix, "-last,\n        & .order").concat(infix, "-last { order: ").concat(columns + 1, "; }\n        \n        ").concat(Array.from({
      length: columns
    }, function (_, i) {
      return "\n          &.order".concat(infix, "-").concat(i, ",\n          & .order").concat(infix, "-").concat(i, " { \n            order: ").concat(i, "; \n          }\n        ");
    }).join('\n'), "\n        \n        ").concat( // `$columns - 1` because offsetting by the width of an entire row isn't possible
    Array.from({
      length: columns - 1
    }, function (_, i) {
      return "\n          &.offset".concat(infix, "-").concat(i, ",\n          & .offset").concat(infix, "-").concat(i, " {\n            ").concat((0, _grid.makeColOffset)(i, columns), "\n          }\n        ");
    }).join('\n'), "\n      ")), "\n");
  }).join('\n') : '';
}

var _default = {
  makeGridColumns: makeGridColumns
};
exports.default = _default;