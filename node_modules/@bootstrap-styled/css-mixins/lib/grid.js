"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeContainer = makeContainer;
exports.makeContainerMaxWidths = makeContainerMaxWidths;
exports.makeRow = makeRow;
exports.makeColReady = makeColReady;
exports.makeCol = makeCol;
exports.makeColOffset = makeColOffset;
exports.default = exports.defaultProps = void 0;

var _unitUtils = _interopRequireDefault(require("@bootstrap-styled/utils/lib/unitUtils"));

var _breakpoints = require("./breakpoints");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toPercent = _unitUtils.default.toPercent;
var defaultProps = {
  '$grid-gutter-width': '30px',
  '$container-max-widths': {
    sm: '540px',
    md: '720px',
    lg: '960px',
    xl: '1140px'
  },
  '$grid-breakpoints': {
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px'
  },
  '$grid-columns': 12,
  '$enable-grid-classes': true
}; // / Grid system

/**
 * @public
 * @description Generate semantic grid columns with these mixins.
 * @param enableGridClasses {boolean} [enableGridClasses=true] - Enable grid system
 * @param gridGutterWidth {string} [gridGutterWidth=30px] - margin between each grid
 * @returns {string}
 */

exports.defaultProps = defaultProps;

function makeContainer() {
  var enableGridClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-grid-classes'];
  var gridGutterWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-gutter-width'];
  return enableGridClasses ? "\n    width: 100%;\n    padding-right: calc(".concat(gridGutterWidth, " / 2);\n    padding-left: calc(").concat(gridGutterWidth, " / 2);\n    margin-right: auto;\n    margin-left: auto;\n  ") : '';
}
/**
 * @public
 * @description For each breakpoint, define the maximum width of the container in a media query
 * @param enableGridClasses {boolean} [enableGridClasses=true] - Enable grid system
 * @param maxWidths {Object} [maxWidth={
    sm: '540px',
    md: '720px',
    lg: '960px',
    xl: '1140px',
  }] - Container max widths
 * @param breakpoints {Object} [breakpoints={
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  }] - Application media breakpoints
 * @returns {string}
 */


function makeContainerMaxWidths() {
  var enableGridClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-grid-classes'];
  var maxWidths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$container-max-widths'];
  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProps['$grid-breakpoints'];
  return enableGridClasses ? Object.keys(breakpoints).map(function (bp) {
    return maxWidths[bp] ? (0, _breakpoints.mediaBreakpointUp)(bp, breakpoints, "max-width: ".concat(maxWidths[bp], ";")) : '';
  }).join('\n') : '';
}
/**
 * @private
 * @description Default <Row /> common css
 * @param enableGridClasses {boolean} [enableGridClasses=true] - Enable grid system
 * @param gridGutterWidth {string} [gridGutterWidth=30px] - margin between each grid
 * @returns {string}
 */


function makeRow() {
  var enableGridClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-grid-classes'];
  var gridGutterWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-gutter-width'];
  return enableGridClasses ? "\n    display: flex;\n    flex-wrap: wrap;\n    margin-right: calc(".concat(gridGutterWidth, " / -2);\n    margin-left: calc(").concat(gridGutterWidth, " / -2);\n  ") : '';
}
/**
 * @private
 * @description Default <Col /> css
 * @param gridGutterWidth
 * @returns {string}
 */


function makeColReady() {
  var gridGutterWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$grid-gutter-width'];
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  return "\n    position: relative;\n    width: 100%;\n    min-height: 1px; // Prevent collapsing\n    padding-right: calc(".concat(gridGutterWidth, " / 2);\n    padding-left: calc(").concat(gridGutterWidth, " / 2);\n  ");
}
/**
 * @private
 * @description  Create max-width and flex position
 * @param {number} [size=0]
 * @param {number} [columns=12] - number of column using $grid-columns variable
 * @returns {string} max-width and flex css rules
 */


function makeCol() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-columns'];
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  return "\n    flex: 0 0 ".concat(toPercent(size, columns), ";\n    max-width: ").concat(toPercent(size, columns), ";\n  ");
}
/**
 * @private
 * @description Create margin-left offset from size
 * @param {number} [size=0]
 * @param {number} [columns=12] - number of column using $grid-columns variable
 * @returns {string} margin-left css rule
 */


function makeColOffset() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-columns'];
  return "margin-left: ".concat(toPercent(size, columns), ";");
}

var _default = {
  makeRow: makeRow,
  makeContainer: makeContainer,
  makeContainerMaxWidths: makeContainerMaxWidths
};
exports.default = _default;