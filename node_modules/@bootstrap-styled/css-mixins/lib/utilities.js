"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zip = zip;
exports.generateUtility = generateUtility;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Combines every list in $lists into a single list of sub-lists.
 * Each element in the returned list contains all the elements at that position in $lists. The returned list is as long as the shortest list in $lists.
 * The returned list is always comma-separated and the sub-lists are always space-separated.
 * This is a rewrite of zip scss function (see: https://sass-lang.com/documentation/modules/list#zip)
 * @param list
 * @returns {[]}
 * @example
 * zip(['10px', '50px', '100px'], ['short', 'mid']); // [['10px', 'short'], ['50px', 'mid']]
 */
function zip() {
  var shortest = 0;

  for (var _len = arguments.length, list = new Array(_len), _key = 0; _key < _len; _key++) {
    list[_key] = arguments[_key];
  }

  list.forEach(function (l) {
    if (l instanceof Array) {
      if (!shortest || l.length < shortest) {
        shortest = l.length;
      }
    }
  });
  var res = [];

  var _loop = function _loop(i) {
    res[i] = [];
    var ind = 0;
    list.forEach(function (l) {
      res[i][ind] = l[i];
      ind += 1;
    });
  };

  for (var i = 0; i < shortest; i += 1) {
    _loop(i);
  }

  return res;
}
/**
 * Utility generator
 * Used to generate utilities & print utilities
 * @param {object} utility - an utility object to process
 * @param {string} [infix=""] - infix (eg: -media, -sm, -md, ...)
 * @returns {string} css - the css for utilities
 */


function generateUtility(utility) {
  var infix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var values = utility.values,
      properties = utility.property;

  if (values instanceof Array) {
    values = zip(values, values);
  } // Multiple properties are possible, for example with vertical or horizontal margins or paddings


  if (typeof properties === 'string') {
    properties = [properties];
  }

  var classList = []; // eslint-disable-next-line no-restricted-syntax

  var _iterator = _createForOfIteratorHelper(values),
      _step;

  try {
    var _loop2 = function _loop2() {
      var _step$value = _slicedToArray(_step.value, 2),
          key = _step$value[0],
          value = _step$value[1];

      var propertyClass = utility.hasOwnProperty('class') ? utility.class : properties[0];
      propertyClass = !propertyClass ? '' : propertyClass;
      var infixFinal = propertyClass === '' && infix[0] === '-' ? infix.slice(1) : infix; // Don't prefix if value key is null (eg. with shadow class)
      // eslint-disable-next-line no-nested-ternary

      var propertyClassModifier = key !== null ? (propertyClass === '' && infixFinal === '' ? '' : '-') + key : '';
      classList.push(".".concat(propertyClass).concat(infixFinal).concat(propertyClassModifier, " {\n      ").concat(properties.map(function (property) {
        return "".concat(property, ": ").concat(value, " !important;");
      }).join('\n'), "\n    }"));
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return classList.join('\n');
}