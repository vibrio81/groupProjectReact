"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.breakpointNext = breakpointNext;
exports.breakpointMin = breakpointMin;
exports.breakpointMax = breakpointMax;
exports.breakpointInfix = breakpointInfix;
exports.mediaBreakpointUp = mediaBreakpointUp;
exports.mediaBreakpointDown = mediaBreakpointDown;
exports.mediaBreakpointBetween = mediaBreakpointBetween;
exports.mediaBreakpointOnly = mediaBreakpointOnly;
exports.default = exports.defaultProps = void 0;

var _unitUtils = _interopRequireDefault(require("@bootstrap-styled/utils/lib/unitUtils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 544px, md: 768px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.
var defaultProps = {
  '$grid-breakpoints': {
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px'
  }
};
/**
 * @private
 * @description Name of the next breakpoint, or null for the last breakpoint.
 * @param {string} name - the breakpoint name (xs, sm, ...)
 * @param {object} [breakpoints={
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  }] - Layout grid breakpoints
 * @param {array} breakpointNames
 * @example
 * breakpointNext('sm')
 * // md
 * @example
 * breakpointNext('sm', { xs: 0, sm: '544px', md: '768px' })
 * // md
 * @example
 * breakpointNext('sm', null, ['xs', 'sm', 'md'])
 * // md
 * @returns {*}
 */

exports.defaultProps = defaultProps;

function breakpointNext(name) {
  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-breakpoints'];
  var breakpointNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.keys(breakpoints);
  var n = breakpointNames.indexOf(name);

  if (n !== -1 && n + 1 < breakpointNames.length) {
    return breakpointNames[n + 1];
  }

  return null;
}
/**
 * @private
 * @description Minimum breakpoint width. Null for the smallest (first) breakpoint.
 * @param {string} name - the breakpoint name (xs, sm, ...)
 * @param {object} [breakpoints={
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  }] - Layout grid breakpoints
 * @example
 * breakpointMin('sm', { xs: '0', sm: '544px', md: '768px' });
 * // 544px
 * @returns {*}
 */


function breakpointMin(name) {
  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-breakpoints'];
  var min = breakpoints[name];
  return min !== '0' ? min : null;
}
/**
 * @private
 * @description Maximum breakpoint width. Null for the largest (last) breakpoint.
 * @param {string} name - the breakpoint name (xs, sm, ...)
 * @param {object} [breakpoints={
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  }] - Layout grid breakpoints
 * @example
 * breakpointMax('sm', { xs: 0, sm: '544px', md: '768px' })
 * // 767px
 * @returns {string|null}
 */


function breakpointMax(name) {
  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-breakpoints'];
  var next = breakpointNext(name, breakpoints);

  if (next) {
    var min = _unitUtils.default.rmUnit(breakpointMin(next, breakpoints), _unitUtils.default.UNIT.PX);

    return (min - 1).toString() + _unitUtils.default.UNIT.PX;
  }

  return null;
}
/**
 * @private
 * @description Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
 * @param {string} name - the breakpoint name (xs, sm, ...)
 * @param {object} [breakpoints={
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  }] - Layout grid breakpoints
 * @example
 * breakpointInfix('xs', { xs: 0, sm: '576px', md: '768px', lg: '992px', xl: '1200px' })
 * // (return a blank string)
 * @example
 * breakpointInfix('sm', { xs: 0, sm: '576px', md: '768px', lg: '992px', xl: '1200px' })
 * // -sm
 * @returns {string}
 */


function breakpointInfix(name) {
  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-breakpoints'];
  return !name || breakpointMin(name, breakpoints) === null ? '' : "-".concat(name);
}
/**
 * @public
 * @description Media of at least the minimum breakpoint width. No query for the smallest breakpoint. Makes the @content apply to the given breakpoint and wider.
 * @param {string} name - the breakpoint name (xs, sm, ...)
 * @param {object} [breakpoints={
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  }] - Layout grid breakpoints
 * @param {string} [content=""] - css
 * @returns {string} media css rules
 */


function mediaBreakpointUp(name) {
  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-breakpoints'];
  var content = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var min = breakpointMin(name, breakpoints);

  if (min) {
    return "\n      @media (min-width: ".concat(min, ") {\n        ").concat(content, "\n      }\n    ");
  }

  return content;
}
/**
 * @public
 * @description Media of at most the maximum breakpoint width. No query for the largest breakpoint. MMakes the @content apply to the given breakpoint and narrower.
 * @param {string} name - the breakpoint name (xs, sm, ...)
 * @param {object} [breakpoints={
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  }] - Layout grid breakpoints
 * @param {string} [content=""] - css
 * @returns {string}
 */


function mediaBreakpointDown(name) {
  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-breakpoints'];
  var content = arguments.length > 2 ? arguments[2] : undefined;
  var max = breakpointMax(name, breakpoints);

  if (max) {
    return "\n      @media (max-width: ".concat(max, ") {\n        ").concat(content, "\n      }\n    ");
  }

  return content;
}
/**
 * @public
 * @description Media that spans multiple breakpoint widths. Makes the @content apply between the min and max breakpoints.
 * @param {string} lower
 * @param {string} upper
 * @param {object} [breakpoints={
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  }] - Layout grid breakpoints
 * @param {string} [content=""] - css
 * @returns {string}
 */


function mediaBreakpointBetween(lower, upper) {
  var breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProps['$grid-breakpoints'];
  var content = arguments.length > 3 ? arguments[3] : undefined;
  var min = breakpointMin(lower, breakpoints);
  var max = breakpointMax(upper, breakpoints);

  if (min && max) {
    return "\n      @media (min-width: ".concat(min, ") and (max-width: ").concat(max, ") {\n        ").concat(content, "\n      }\n    ");
  } else if (min) {
    return "\n      @media (min-width: ".concat(min, ") {\n        ").concat(content, "\n      }\n    ");
  } else if (max) {
    return "\n      @media (max-width: ".concat(max, ") {\n        ").concat(content, "\n      }\n    ");
  }

  return content;
}
/**
 * @public
 * @description Media between the breakpoint's minimum and maximum widths.
 * No minimum for the smallest breakpoint, and no maximum for the largest one.
 * Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
 * @param {string} name - the breakpoint name (xs, sm, ...)
 * @param {object} breakpoints [breakpoints={
    xs: '0',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
  }] - Layout grid breakpoints
 * @param {string} content [content=""] - css
 * @returns {string}
 */


function mediaBreakpointOnly(name) {
  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultProps['$grid-breakpoints'];
  var content = arguments.length > 2 ? arguments[2] : undefined;
  return mediaBreakpointBetween(name, name, breakpoints, content);
}

var _default = {
  defaultProps: defaultProps,
  up: mediaBreakpointUp,
  down: mediaBreakpointDown,
  between: mediaBreakpointBetween,
  only: mediaBreakpointOnly
};
exports.default = _default;