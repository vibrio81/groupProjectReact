"use strict";

var _immutable = require("immutable");

var _hover = require("../hover");

var _MixinError = _interopRequireDefault(require("../MixinError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('bootstrap hover mixins', function () {
  it('hover should return a css', function () {
    var css = (0, _hover.hover)("\n      cursor: pointer;\n      opacity: .5;\n    ");
    expect(css).not.toContain('undefined');
    expect(css).not.toContain('null');
    expect(css).toContain('&:hover, &.hover { ');
    expect(css).toContain('cursor: pointer;');
    expect(css).toContain('opacity: .5;');
    expect(css).toContain('}');
  });
  it('hover should have arguments', function () {
    expect(_hover.hover).toThrowError(new _MixinError.default('content is required'));
  });
  it('hoverFocus should return a css without media query', function () {
    var css = (0, _hover.hoverFocus)(_hover.defaultProps['$enable-hover-media-query'], "cursor: pointer;\n      opacity: .5;");
    expect(css).not.toContain('undefined');
    expect(css).not.toContain('null');
    expect(css).toContain('&:focus,');
    expect(css).toContain('&.focus,');
    expect(css).toContain('&:hover,');
    expect(css).toContain('&.hover {');
    expect(css).toContain('cursor: pointer;');
    expect(css).toContain('opacity: .5;');
    expect(css).toContain('}');
  });
  it('hoverFocus should return a css with media query', function () {
    var css = (0, _hover.hoverFocus)(!_hover.defaultProps['$enable-hover-media-query'], "cursor: pointer;\n      opacity: .5;");
    expect(css).not.toContain('undefined');
    expect(css).not.toContain('null');
    expect(css).toContain('&:focus, &.focus { cursor: pointer;');
    expect(css).toContain('opacity: .5; }');
    expect(css).toContain('&:hover, &.hover { cursor: pointer;');
    expect(css).toContain('opacity: .5; }');
  });
  it('hoverFocus should have arguments', function () {
    var css = (0, _hover.hoverFocus)();
    expect(css).toContain('&:focus,');
    expect(css).toContain('&.focus,');
    expect(css).toContain('&:hover,');
    expect(css).toContain('&.hover {');
    expect(css).toContain('undefined');
    expect(css).toContain('}');
  });
  it('hoverFocusActive should return a css without media query', function () {
    var css = (0, _hover.hoverFocusActive)(_hover.defaultProps['$enable-hover-media-query'], "cursor: pointer;\n      opacity: .5;");
    expect(css).not.toContain('undefined');
    expect(css).not.toContain('null');
    expect(css).toContain('&:focus, ');
    expect(css).toContain('&.focus, ');
    expect(css).toContain('&:active, ');
    expect(css).toContain('&.active,');
    expect(css).toContain('&:hover,');
    expect(css).toContain('&.hover {');
    expect(css).toContain('cursor: pointer;');
    expect(css).toContain('opacity: .5;');
    expect(css).toContain('}');
  });
  it('hoverFocusActive should return a css with media query', function () {
    var css = (0, _hover.hoverFocusActive)(!_hover.defaultProps['$enable-hover-media-query'], "cursor: pointer;\n      opacity: .5;");
    expect(css).not.toContain('undefined');
    expect(css).not.toContain('null');
    expect(css).toContain('&:focus,');
    expect(css).toContain('&.focus,');
    expect(css).toContain('&:active,');
    expect(css).toContain('&.active {');
    expect(css).toContain('cursor: pointer;');
    expect(css).toContain('opacity: .5;');
    expect(css).toContain('}');
    expect(css).toContain('&:hover, &.hover { cursor: pointer;');
    expect(css).toContain('opacity: .5; }');
  });
  it('hoverFocusActive should have arguments', function () {
    var css = (0, _hover.hoverFocusActive)();
    expect(css).toContain('&:focus, ');
    expect(css).toContain('&.focus, ');
    expect(css).toContain('&:active, ');
    expect(css).toContain('&.active,');
    expect(css).toContain('&:hover,');
    expect(css).toContain('&.hover {');
    expect(css).toContain(' undefined');
    expect(css).toContain('}');
  });
  it('plainHoverFocus should return a css without media query', function () {
    var css = (0, _hover.plainHoverFocus)(_hover.defaultProps['$enable-hover-media-query'], "cursor: pointer;\n      opacity: .5;");
    expect(css).not.toContain('undefined');
    expect(css).not.toContain('null');
    expect(css).toContain('&,');
    expect(css).toContain('&:focus, ');
    expect(css).toContain('&.focus, ');
    expect(css).toContain('&:hover, ');
    expect(css).toContain('&.hover {');
    expect(css).toContain('cursor: pointer;');
    expect(css).toContain('opacity: .5;');
    expect(css).toContain('}');
  });
  it('plainHoverFocus should return a css with media query', function () {
    var css = (0, _hover.plainHoverFocus)(!_hover.defaultProps['$enable-hover-media-query'], "cursor: pointer;\n      opacity: .5;");
    expect(css).not.toContain('undefined');
    expect(css).not.toContain('null');
    expect(css).toContain('&,');
    expect(css).toContain('&:focus, ');
    expect(css).toContain('&.focus {');
    expect(css).toContain('cursor: pointer;');
    expect(css).toContain('opacity: .5;');
    expect(css).toContain('}');
    expect(css).toContain('&:hover, &.hover { cursor: pointer;');
    expect(css).toContain('opacity: .5; }');
  });
  it('plainHoverFocus should have arguments', function () {
    var css = (0, _hover.plainHoverFocus)();
    expect((0, _immutable.fromJS)({
      css: css
    }).hashCode()).toEqual(-136472967);
  });
  it('hover should have hoverFocus', function () {
    var css = _hover.hover.focus(_hover.defaultProps['$enable-hover-media-query'], "cursor: pointer;\n      opacity: .5;");

    expect((0, _immutable.fromJS)({
      css: css
    }).hashCode()).toEqual(1054832218);
  });
  it('hover should have plainHoverFocus', function () {
    var css = _hover.hover.plainFocus(_hover.defaultProps['$enable-hover-media-query'], "cursor: pointer;\n      opacity: .5;");

    expect((0, _immutable.fromJS)({
      css: css
    }).hashCode()).toEqual(1058096530);
  });
  it('hover should have hoverFocusActive', function () {
    var css = _hover.hover.activeFocus(_hover.defaultProps['$enable-hover-media-query'], "cursor: pointer;\n      opacity: .5;");

    expect((0, _immutable.fromJS)({
      css: css
    }).hashCode()).toEqual(268514486);
  });
});