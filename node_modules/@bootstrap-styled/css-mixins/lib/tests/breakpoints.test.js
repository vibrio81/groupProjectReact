"use strict";

var _breakpoints = require("../breakpoints");

describe('bootstrap breakpoints mixins', function () {
  it('breakpointNext should return a css', function () {
    var breakpoint = (0, _breakpoints.breakpointNext)('xs', _breakpoints.defaultProps['$grid-breakpoints'], Object.keys(_breakpoints.defaultProps['$grid-breakpoints']));
    expect(breakpoint).toEqual('sm');
    breakpoint = (0, _breakpoints.breakpointNext)('sm', _breakpoints.defaultProps['$grid-breakpoints'], Object.keys(_breakpoints.defaultProps['$grid-breakpoints']));
    expect(breakpoint).toEqual('md');
    breakpoint = (0, _breakpoints.breakpointNext)('md', _breakpoints.defaultProps['$grid-breakpoints'], Object.keys(_breakpoints.defaultProps['$grid-breakpoints']));
    expect(breakpoint).toEqual('lg');
    breakpoint = (0, _breakpoints.breakpointNext)('lg', _breakpoints.defaultProps['$grid-breakpoints'], Object.keys(_breakpoints.defaultProps['$grid-breakpoints']));
    expect(breakpoint).toEqual('xl');
  });
  it('breakpointNext should return null if not arguments are passed', function () {
    var css = (0, _breakpoints.breakpointNext)();
    expect(css).toBeNull();
  });
  it('breakpointMin should be null', function () {
    var css = (0, _breakpoints.breakpointMin)('xs', _breakpoints.defaultProps['$grid-breakpoints']);
    expect(css).toBeNull();
  });
  it('breakpointMin should be not null', function () {
    var css = (0, _breakpoints.breakpointMin)('sm', _breakpoints.defaultProps['$grid-breakpoints']);
    expect(css).toEqual('576px');
  });
  it('breakpointMin should return null if no arguments are passed', function () {
    var css = (0, _breakpoints.breakpointMin)();
    expect(css).toBeUndefined();
  });
  it('breakpointMax should be not null', function () {
    var css = (0, _breakpoints.breakpointMax)('sm', _breakpoints.defaultProps['$grid-breakpoints']);
    expect(css).toEqual('767px');
  });
  it('breakpointMax should be null', function () {
    var css = (0, _breakpoints.breakpointMax)('xl', _breakpoints.defaultProps['$grid-breakpoints']);
    expect(css).toBeNull();
  });
  it('breakpointMax should return null if no arguments are passed', function () {
    var css = (0, _breakpoints.breakpointMax)();
    expect(css).toBeNull();
  });
  it('mediaBreakpointInfix should return ""', function () {
    var css = (0, _breakpoints.breakpointInfix)('xs', _breakpoints.defaultProps['$grid-breakpoints']);
    expect(css).toEqual('');
  });
  it('mediaBreakpointInfix should return null', function () {
    var css = (0, _breakpoints.breakpointInfix)('md', _breakpoints.defaultProps['$grid-breakpoints']);
    expect(css).toEqual('-md');
  });
  it('breakpointInfix should return an empty string if no arguments are passed', function () {
    var css = (0, _breakpoints.breakpointInfix)();
    expect(css).toEqual('');
  });
  it('mediaBreakpointUp should return a media query', function () {
    var css = (0, _breakpoints.mediaBreakpointUp)('md', _breakpoints.defaultProps['$grid-breakpoints'], 'content: \'awesome!\';');
    expect(css).toContain('@media (min-width: 768px) {');
    expect(css).toContain('content: \'awesome!\';');
  });
  it('mediaBreakpointUp should return an empty string if no arguments are passed', function () {
    var css = (0, _breakpoints.mediaBreakpointUp)();
    expect(css).toEqual('');
  });
  it('mediaBreakpointDown should return a media query', function () {
    var css = (0, _breakpoints.mediaBreakpointDown)('md', _breakpoints.defaultProps['$grid-breakpoints'], 'content: \'awesome!\';');
    expect(css).toContain('@media (max-width: 991px) {');
    expect(css).toContain('content: \'awesome!\';');
  });
  it('mediaBreakpointDown should return null if no arguments are passed', function () {
    var css = (0, _breakpoints.mediaBreakpointDown)();
    expect(css).toBeUndefined();
  });
  it('mediaBreakpointBetween should return a media query', function () {
    var css = (0, _breakpoints.mediaBreakpointBetween)('md', 'lg', _breakpoints.defaultProps['$grid-breakpoints'], 'content: \'awesome!\';');
    expect(css).toContain('@media (min-width: 768px) and (max-width: 1199px) {');
    expect(css).toContain('content: \'awesome!\';');
  });
  it('mediaBreakpointBetween should return a max media query', function () {
    var css = (0, _breakpoints.mediaBreakpointBetween)('xs', 'lg', _breakpoints.defaultProps['$grid-breakpoints'], 'content: \'awesome!\';');
    expect(css).toContain('@media (max-width: 1199px) {');
    expect(css).toContain('content: \'awesome!\';');
  });
  it('mediaBreakpointBetween should return a min media query', function () {
    var css = (0, _breakpoints.mediaBreakpointBetween)('md', 'xl', _breakpoints.defaultProps['$grid-breakpoints'], 'content: \'awesome!\';');
    expect(css).toContain('@media (min-width: 768px) {');
    expect(css).toContain('  content: \'awesome!\';');
  });
  it('mediaBreakpointBetween should return null if no arguments are passed', function () {
    var css = (0, _breakpoints.mediaBreakpointBetween)();
    expect(css).toBeUndefined();
  });
  it('mediaBreakpointOnly should return a media query', function () {
    var css = (0, _breakpoints.mediaBreakpointOnly)('md', _breakpoints.defaultProps['$grid-breakpoints'], "\n      content: 'awesome!';\n    ");
    expect(css).toContain('@media (min-width: 768px) and (max-width: 991px) {');
    expect(css).toContain('  content: \'awesome!\';');
  });
  it('mediaBreakpointOnly should return null if no arguments are passed', function () {
    var css = (0, _breakpoints.mediaBreakpointOnly)();
    expect(css).toBeUndefined();
  });
});