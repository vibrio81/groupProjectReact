"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hover = hover;
exports.hoverFocus = hoverFocus;
exports.plainHoverFocus = plainHoverFocus;
exports.hoverFocusActive = hoverFocusActive;
exports.default = exports.defaultProps = void 0;

var _MixinError = _interopRequireDefault(require("./MixinError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultProps = {
  '$enable-hover-media-query': false
};
/**
 * @public Css helper for hovering.
 * @description
 * @param {string} content
 * @returns {string}
 */

exports.defaultProps = defaultProps;

function hover(content) {
  if (!content) throw new _MixinError.default('content is required'); // TODO: re-enable along with mq4-hover-shim
  //  @if $enable-hover-media-query {
  //    // See Media Queries Level 4: https://drafts.csswg.org/mediaqueries/#hover
  //    // Currently shimmed by https://github.com/twbs/mq4-hover-shim
  //    @media (hover: hover) {
  //      &:hover { @content }
  //    }
  //  }
  //  @else {

  return "&:hover, &.hover { ".concat(content, " }");
}
/**
 * @public Css helper for focus and hovering.
 * @description
 * @param {boolean} enableHoverMediaQuery
 * @param {string} content
 * @returns {string}
 */


function hoverFocus() {
  var enableHoverMediaQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-hover-media-query'];
  var content = arguments.length > 1 ? arguments[1] : undefined;

  if (enableHoverMediaQuery) {
    return " \n      &:focus, &.focus { ".concat(content, " }\n      ").concat(hover(content), "\n    ");
  }

  return "\n    &:focus,\n    &.focus,\n    &:hover,\n    &.hover {\n      ".concat(content, "\n    }\n  ");
}
/**
 * @public Css helper for plain focus and hovering.
 * @description
 * @param {boolean} enableHoverMediaQuery
 * @param {string} content
 * @returns {string}
 */


function plainHoverFocus() {
  var enableHoverMediaQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-hover-media-query'];
  var content = arguments.length > 1 ? arguments[1] : undefined;

  if (enableHoverMediaQuery) {
    return "\n      &, \n      &:focus, \n      &.focus {\n        ".concat(content, "\n      }\n      ").concat(hover(content), "\n    ");
  }

  return " \n    &, \n    &:focus, \n    &.focus, \n    &:hover, \n    &.hover {\n      ".concat(content, "\n    }\n  ");
}
/**
 * @public Css helper for focus and active.
 * @description
 * @param {boolean} enableHoverMediaQuery
 * @param {string} content
 * @returns {string}
 */


function hoverFocusActive() {
  var enableHoverMediaQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-hover-media-query'];
  var content = arguments.length > 1 ? arguments[1] : undefined;

  if (enableHoverMediaQuery) {
    return "\n      &:focus,\n      &.focus,\n      &:active,\n      &.active {\n        ".concat(content, "\n      }\n      ").concat(hover(content), "\n    ");
  }

  return "\n    &:focus, \n    &.focus, \n    &:active, \n    &.active,\n    &:hover,\n    &.hover {\n     ".concat(content, "\n    }\n  ");
}

hover.focus = hoverFocus;
hover.plainFocus = plainHoverFocus;
hover.activeFocus = hoverFocusActive;
var _default = {
  defaultProps: defaultProps,
  hover: hover,
  hoverFocus: hoverFocus,
  plainHoverFocus: plainHoverFocus,
  hoverFocusActive: hoverFocusActive
};
exports.default = _default;